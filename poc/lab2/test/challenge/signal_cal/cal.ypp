%{
//处理好空格，制表符，回车，数字
#include<stdio.h>
#include<stdlib.h>
// bool
#include<ctype.h>
#ifndef YYSTYPE
//我们要翻译的结果是表达式值,所以类型是double
#define YYSTYPE double

#include <map>
#include <string>
#include <iostream>
using namespace std;

#endif

int yylex();
extern int yyparse();
FILE* yyin;
void yyerror(const char*s);
//生成一个长度为50的空字符串
string idStr(50,'\0');
//string为ID，double为对应的数组下标,这里不能用char*，如果传递的是char*，即地址的话，就会出现a=2;b=7;a的值变为7.000的情况
map<string,int> my_map;
//ID个数
int count=0;
//数组中存着ID的值,创建的原因，只能使用double调用double
double IDListNum[80]{};
//添加了token:ID,EQUAL
%}

%token NUMBER
%token ADD SUB
%token MUL DIV
%token L_PAR R_PAR
%token ID
%token EQUAL

%left  ADD SUB
%left  MUL DIV
%right UMINUS

%%
lines : lines expr ';' {printf("%f\n",$2);}//使用分号替换lines产生式中的\n
        | lines stmt ';' {printf("%f\n",$2); }//stmt和expr计算的结果都要打印
      | lines ';'
      |
      ;
// 

stmt : ID EQUAL expr {$$=IDListNum[int($1)]=$3; }//语句声明

expr  : expr ADD expr {$$=$1+$3;}
      | expr SUB expr {$$=$1-$3;}
      | expr MUL expr {$$=$1*$3;}
      | expr DIV expr {$$=$1/$3;}
      | L_PAR expr R_PAR {$$=$2;}
      | SUB expr %prec UMINUS { $$ = -$2; }
      | NUMBER {$$=$1;}
      | ID {$$ = IDListNum[int($1)]; }
      ;
/*
NUMBER : '0' {$$=0.0;}
       | '1' {$$=1.0;}  
       | '2' {$$=2.0;}
       | '3' {$$=3.0;}
       | '4' {$$=4.0;}
       | '5' {$$=5.0;}
       | '6' {$$=6.0;}
       | '7' {$$=7.0;}
       | '8' {$$=8.0;}
       | '9' {$$=9.0;}    
*/
%%

int yylex()
{
    int t;
    while(1)
    {
        t=getchar();
        //过滤的符号
        if(t==' '||t=='\t'||t=='\n')
        {
            //do nothing
        }
        //数字
        else if(isdigit(t))
        {
            yylval=0;
            while(isdigit(t))
            {
                yylval=yylval*10+t-'0'; 
                t=getchar();
            }
            ungetc(t,stdin);
            return NUMBER;
        }
        //ID
        else if((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_'))
        {
            int ti=0;
            while((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_')||(isdigit(t)))
            {
                idStr[ti]=t;
                ti++;
                t=getchar();
            }
            idStr[ti]='\0';
            //yylval=idStr;
            ungetc(t,stdin);
            //在map中寻找值为idStr的元素，返回该元素的迭代器。否则，返回map.end()。
            //若不存在，则插入，且初值赋值为0
            if(my_map.find(idStr)==my_map.end()){
                //将ID以及其对应在数组中的下标直接插入map中
                my_map.insert(pair<string,int>(idStr,count));
                //该ID的初值赋值为0
                IDListNum[count]=0;
                yylval=count++;
                return ID;
            }
            //若存在，则直接返回
                yylval=my_map[idStr];
                return ID;
        }
        //operator
        else if(t=='+') return ADD;
        else if(t=='-') return SUB;
        else if(t=='*') return MUL;
        else if(t=='/') return DIV;
        else if(t=='(') return L_PAR;
        else if(t==')') return R_PAR;
        //don't forget to add
        else if(t=='=') return EQUAL;
        else return t;

    }
}
int main(void)
{
    yyin=stdin;
    do{
        yyparse();
    }
    while(!feof(yyin));
    return 0;
}
void yyerror(const char* s)
{
    fprintf(stderr,"Parse error:%s\n",s);
    exit(1);
}



