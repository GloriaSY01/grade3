%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>
#include<ctype.h>
using namespace std;
struct ss{
       int label;
       string name;
       string code;
};

string my_code(ss* left, ss* right1, ss* right3, string op){
       string r_code;
       r_code=right1->code;
       r_code.append("\n");
       r_code.append(right3->code);
       r_code.append("MOV EAX ");
       r_code.append(right1->name);
       r_code.append("\n");       
       r_code.append("MOV EBX ");
       r_code.append(right3->name);
       r_code.append("\n");
       r_code.append(op);
       r_code.append(" EAX EBX");
       r_code.append("\n");
       r_code.append("MOV ");
       r_code.append(left->name);
       r_code.append(" EAX");
       r_code.append(" \n");
       return r_code;
}

#ifndef YYSTYPE
#define YYSTYPE ss*
#endif
string idStr;
string numStr;
int yylex();
extern int yyparse();
FILE* yyin;

void yyerror(const char* s );
static int count=0;
%}

%token NUMBER
%token ADD SUB
%token MUL DIV
%token L_PAR R_PAR
%token ID
%token EQUAL

%left ADD SUB
%left MUL DIV

%%


lines   :  lines expr';' { cout<<($2->code); }
	| lines statement ';' {cout<<($2->code);}
        |  lines ';'
        |
        ;
        
statement : ID EQUAL expr {
       $$=new ss;
       $$->code=$3->code;
       $$->code.append("\nMOV EAX ");
       $$->code.append($3->name);
       $$->code.append("\nMOV ");
       $$->code.append($1->name);
	$$->code.append(" EAX\n");}
       ;

expr    : expr ADD expr{
                     $$=new ss;
                     //这里限定只有5个寄存器，实现寄存器复用
                     $$->label=count++%5;
                     $$->name="%";
                     $$->name.append(to_string($$->label));
                     $$->code=my_code($$,$1,$3,"ADD");
                     }
        | expr SUB expr{
                     $$=new ss;
                     $$->label=count++%5;
                     $$->name="%";
                     $$->name.append(to_string($$->label));
                     $$->code=my_code($$,$1,$3,"SUB");
                     }
        | expr MUL expr{
                     $$=new ss;
                     $$->label=count++%5;
                     $$->name="%";
                     $$->name.append(to_string($$->label));
                     $$->code=my_code($$,$1,$3,"MUL");
                     }
        | expr DIV expr{
                     $$=new ss;
                     $$->label=count++%5;
                     $$->name="%";
                     $$->name.append(to_string($$->label));
                     $$->code=my_code($$,$1,$3,"DIV");
                     }       
        | L_PAR expr R_PAR {
                     $$ = new ss;
                     $$->label=$2->label;
                     $$->name="%";
                     $$->name.append(to_string($$->label));
                     $$->code=$2->code;}
        | NUMBER{
                     $$=new ss;
                     $$->name=$1->name;
                     $$->code="";}
        | ID{
                     $$=new ss;
                     $$->name=$1->name;
                     $$->code="";}



%%

       int yylex()
       {
              int t ;
              while (1)
              {
                     t = getchar ();
                     //过滤的符号
                     if(t==' '||t=='\t'||t=='\n')
                     {
                     //do nothing
                     }
                     else if(isdigit(t))
                     {
                            numStr="";
                            while(t >= '0' && t <= '9')
                            {
                                   string temp(1,t);
                                   numStr.append(temp);
                                   t=getchar();
                            }
                            string temp(1,'\0');
                            numStr.append(temp);
                            yylval = new ss;
                            yylval->name=numStr;
                            ungetc(t, stdin);
                            return NUMBER;
                     }
                     else if((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_'))
                     {
                            idStr="";
                            while((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_')||(isdigit(t)))
                            {      
                                   string temp(1,t);
                                   idStr.append(temp);
                                   t=getchar();
                            }
                            string temp(1,'\0');
                            idStr.append(temp);
                            yylval = new ss;
                            yylval->name=idStr;
                            ungetc(t, stdin);
                            return ID;
                     }
                     //operator
                     else if(t=='+') return ADD;
                     else if(t=='-') return SUB;
                     else if(t=='*') return MUL;
                     else if(t=='/') return DIV;
                     else if(t=='(') return L_PAR;
                     else if(t==')') return R_PAR;
                     //don't forget to add
                     else if(t=='=') return EQUAL;
                     else return t;
              }
       }

       int main()
       {
              yyin = stdin ;
              do 
              {
                     yyparse();
              } 
                     while (!feof(yyin));
              return 0;
       }

       void yyerror(const char* s) 
       {
              fprintf (stderr , "Parse error : %s\n", s );
              exit (1);
       }


